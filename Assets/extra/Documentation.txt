>Programmers
| Cailey Marie Bianchini|
| Josh|
| Nick|
>VFX
|Michal|
>Artist
| Kenshie|
| Nathen Aytona|
| :---          	|
| BreadCrumbs |
|  |
| class 2022 |
|June 25, 2021|


## I. Requirements

1. What Was Wanted
A Game that added more to arcade games.

2. Input Information
- the player will be able to use keys A, D, W, S, and [ESC]

1.  Output Information
- A - this always the player to move left
- D - this always the player to move right
- W - this always the player to move up
- S - this always the player to move down
- [ESC] - will pull up a Pause menu


## II. Errors

    1. 


### III. Classes

**File**:  AppearToPlayer.cs : MonoBehaviour.cs

**Attributes**


         Name: OnTriggerEnter(Collider other)
             Description: activate the Mesh Renderer of the other object while player is in range
             Type: private void
         Name: OnTriggerExit(Collider other)
             Description: when the player leaves the range, turn off mesh renderer
             Type: private void

**File**: CollectibleBehaviour.cs : MonoBehaviour.cs

**Attributes**


         Name: ResetCollectable()
             Description: invokes ResetPosition() after _respawnTime is up
             Type: public void
         Name: ResetPosition()
             Description: this transforms the position of the collectables
             Type: private void
         Name: OnTriggerEnter(Collider ther)
             Description: adds value to game manager and moved collectible away from sight
             Type: void

**File**:  ScoringSystem.cs : MonoBehaviour.cs

**Attributes**
 

         Name: Start()
             Description: grabs the score text
             Type: void
         Name: Update()
             Description: UI says the score and shows the current player score
             Type: void

**File**:  Event.cs : MonoBehaviour.cs

**Attributes**

         Name: AddListener(IListener newListener)
             Description: adds a listener to events list of listener
             Type: public void
         Name: Raise(GameObject sender = null)
             Description: calls invoke for every listener in the list
             Type: public void

**File**:  GameEventListenerBehaviour.cs : MonoBehaviour.cs , IListener

**Attributes**

         Name: Start()
             Description: adds a listener to event 
             Type: void
         Name: Invoke(GameObject Sender)
             Description: checks if the listener is null and if so it activates
             Type: public void

**File**:  LightBehaviours.cs : MonoBehaviour.cs

**Attributes**

         Name: Start()
             Description: Calls the light component
             Type: void
         Name: Update()
             Description: if powerLighting is false it sets light to max but if true sets light to min
             Type: void

**File**:  LightBottleBehaviour.cs : MonoBehaviour.cs

**Attributes**

         Name: Start()
             Description: grabs components from the start 
             Type: void
         Name: OnCollisionEnter(Collision)
             Description: this will tell what happens to an object when colliding
             Type: private void
         Name: LightEnumerator()
             Description: does a coroutine for lights increase range
             Type: IEnumerator
         Name: WaitAndChange(float waitTime)
             Description: waits for waitTime before continuing 
             Type: IEnumerator
         Name: Update()
             Description: this will continusly update and if collision has happened and what it should do
             Type: private void

**File**:  PlayerHealthBehaviour.cs : MonoBehaviour.cs

**Attributes**

         Name: Start()
             Description: This wmakes sure that each time this scene is called it resets health to 0.
             Type: void
         Name: OnCollisionEnter(Collision collision)
             Description: this will check to see if player collided with an object with a tag "Enemy"
             Type: private void
         Name: GameOverScreen()
             Description: this will check if gameover screen is true or not and set it active
             Type: public void
         Name: PlayerPosition()
             Description: this resets values and player position to origin point
             Type: void
         Name: Update()
             Description: this will check players _lives and decides if to give a game over or not
             Type: void

**File**:  Controller.cs : MonoBehaviour.cs

**Attributes**

         Name: Start()
             Description: Grabs components towards the start of the scene 
             Type: void
         Name: FixedUpdate()
             Description: this will grab the values of the users inputed controls to move the player
             Type: private void

    **File**:  InputControl.cs : MonoBehaviour.cs

**Attributes**

         Name: Awake()
             Description: makes the value of the controls be able to be grabable
             Type: private void
         Name: OnEnable()
             Description: this grabs the value of the controls from the settings 
             Type: private void
         Name: OnMovedPerformed(InputAction.CallbackContext context)
             Description: reads the values of the inputs and allows events to be called
             Type: private void

 **File**:  PlayerMovementBehaviour.cs : MonoBehaviour.cs

**Attributes**

         Name: Start()
             Description: grabs the value of the rigidbody component at the start of the scene 
             Type: void
         Name: Move(Vector3 direction)
             Description: adds the value of direction, speed and real time to velocity
             Type: public void
         Name: FixedUpdate()
             Description: this updates every frame and moved the position of the rigidbody
             Type: void

 **File**:  ButtonColorChange.cs : MonoBehaviour.cs, IPointerEnterHandler, IPointerExitHandler

**Attributes**

         Name: OnPointerEnter(PointerEventData eventData)
             Description: changed the text to red when mouse is hovering over button
             Type: public void
         Name: OnPointerExit(PointerEventData eventData)
             Description: changed the tect to black when mouse isnt hovering over button
             Type: public void

 **File**:  MenuBehaviour.cs : MonoBehaviour.cs

**Attributes**

         Name: PlayGame()
             Description: loads the next scene for the start button
             Type: public void
         Name: QuiteGame()
             Description: this closes the game when called
             Type: public void
         Name: Update()
             Description: checks if screen manager is active and checks other facters each frame
             Type: private void
         Name: Resume()
             Description: unpauseses the game and closes UI 
             Type: public void
         Name: Pause()
             Description: pauses the game and open UI
             Type: void
